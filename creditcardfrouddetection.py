# -*- coding: utf-8 -*-
"""CreditCardFroudDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sQWWcOXNoBFqo1z_bnOQcvSehan3LIjC
"""

#Importing dependencies
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dataset t a pandas data fraim
credit_card_data=pd.read_csv("/content/creditcard.csv")

#first five rows of the data set
credit_card_data.head()

credit_card_data.tail() #first last five rows

#dataset infomation
credit_card_data.info()

#checking the number of missing values
credit_card_data.isnull().sum()

#the distribution of legit tranjaction & frudlent transation
credit_card_data['Class'].value_counts()

"""this dataset highely unblanced dataset
0=normall
1=fraoudland tranjection
"""

#seprating the dtat for anlysis
legit=credit_card_data[credit_card_data.Class==0]
fraud=credit_card_data[credit_card_data.Class==1]

print(legit.shape)
print(fraud.shape)

#stastical measure of the data
legit.Amount.describe()

fraud.Amount.describe()

#compair the values for both transation
credit_card_data.groupby('Class').mean()

legit_sample = legit.sample(n=59348)

new_dataset=pd.concat([legit_sample,fraud, axis=0])

new_dataset=pd.concat([legit_sample,fraud],axis=0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

#spliting the data into features and targets
X=new_dataset.drop(columns='Class',axis=1)
Y=new_dataset['Class']

print(X)

print(Y)

#splitinng the data in to traing dat and testing data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

#model traing using logistic regression
model = LogisticRegression()

#traing the logistic Regession
model.fit(X_train,Y_train)

#model evolution
#accuracy score

#accuracy on traing data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on traing data',training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("accuracy on test data",test_data_accuracy)

